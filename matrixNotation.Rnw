\documentclass{article}
\usepackage{fullpage}
\begin{document}

<<>>=
set.seed(20151001)
@ 

Let $X$ be a (model) matrix of covariates with dimension $n \times p$. Any missing values have been imputed. Let $M$ be a matrix of missingness indicators with dimension $n \times p'$, with $p' \le p$. $C$ is a $n \times c$ (sparse) matrix indicating cluster membership with 1, zero otherwise for $c$ clusters. $S$ is a $n \times s$ (sparse) matrix indicating membership in the $s$ strata. While each row of $C$ has one and only one finite entry, it may be the case that some units are not in any stratum. $Z$ is a vector of treatment assignment. We can assume it has been validated taht all members of the same cluster have the same $Z_i$ value and all clusters are nested within strata. Furthermore, all strata have at least one treated and at least one control (if not we set members of those strata to zero everywhere).

Goal: express all operations required for \texttt{xBalance} computations with respect to these matrices.

\section*{Descriptive Statistics}

All descriptive statistics are computed without respect to clustering.

Some examples to check that we get what we want. 2 sets of 3 and one set of 2. We'll use column matrices to make sure we have the right dimensions everywhere. We'll make the treated unit missing a value on $X_1$ for group 3, both treated units missing on $X_2$, and both control units missing on $X_3$. Nothing missing on $X_4$.
<<>>=
(Z <- matrix(c(1,0,0,1,1,0,0,1), nrow = 8))
(S <- matrix(c(rep(c(1,0,0), 3), rep(c(0,1,0), 3), rep(c(0,0,1), 2)), nrow = 8, byrow = T))
(M <- matrix(c(0,0,0,0,0,0,0,1, # X_1
               0,0,0,1,1,0,0,0, # X_2
               0,1,1,0,0,0,0,0, # X_3
               0,0,0,0,0,0,0,0),# X_4
             nrow = 8))
X <- matrix(rnorm(32), nrow = 8)
@ 

We need to make \emph{per-variable} weights based on non-missingness. We want to drop any units in strata that have all missing treated or all missing control. At the end of the day, we want a matrix that is $n \times p$, where $p$ is the number of variables we're considering.

<<>>=
ZZ <- S * matrix(Z, ncol = ncol(S), nrow = nrow(Z)) # this matrix indicates for each stratum, which units are treated
WW <- S * matrix(1 - Z, ncol = ncol(S), nrow = nrow(Z)) 
S.missing.0 <- t(ZZ) %*% (1 - M) == 0 
S.missing.1 <- t(WW) %*% (1 - M) == 0
S.has.both <- !(S.missing.0 | S.missing.1)
use.units <- (S %*% S.has.both)
@ 

We can get the per variable $n$:
<<>>=
n1 <- t(use.units) %*% Z
n0 <- t(use.units) %*% (1 - Z)
@ 

Then we can get ETT strata weights per variable:
<<>>=
(ETT <- S %*% t(ZZ) %*% use.units)
@ 

Then we can compute the simple treated unit averages as:
<<>>=
(treated.avg <- t(X * use.units) %*% Z / n1)
@ 

The control averages are ETT weighted, instead we do:
<<>>=
n0.ett <- t(ETT) %*% (1 - Z)
(control.avg <- t(X * ETT) %*% (1 - Z) / n0.ett)
@ 

Next up, pooled standard deviations. [SHOULD THESE BE ETT WEIGHTED?]

<<>>=
v <- (X)^2 * ETT

var.1 <- colSums((v * as.vector(Z))^2) - n1 * treated.avg^2
var.0 <- colSums((v * as.vector(1 - Z))^2) - n0 * control.avg^2

(pooled <- sqrt((var.1 + var.0) / (n1 + n0 - 2)))
apply(X, 2, sd)
@

Hmm. I would expect these to be a little closer to the non-pooled versions without ETT weighting.

Proceeding as if we have the correct pooled SD, next up is the standardized differences. Following along from the current implementation, we wan to get the \emph{proportion} treated in each stratum. The result is a matrix that is $s \times p$ -- for each stratum level, what is the proprotion treated (filtering out strata that have no non-missing treated or control units for a given variable)
<<>>=
strata.variable.treated <- t(ZZ) %*% use.units
(proportion.treated <- strata.variable.treated / colSums(S))
@ 
Then, for each variable, we get a centered treatment indicator:
<<>>=
ZX <- matrix(Z, nrow = dim(X)[1], ncol = dim(X)[2])
(centeredTreatment <- ZX - S %*% proportion.treated)
@ 
Now to get the adjusted difference per strata, we multiply the weighted treatment indicator by the data and weights

<<>>=
(weightedMean <- colSums(X * ETT * centeredTreatment))
@ 

Getting per variable means and variance by stratum level

<<>>=
n.ett <- colSums(ETT)
(strataVariableMeans <- t(S) %*% (X * ETT) / n.ett )
(strataVariableVar   <- (t(S) %*% (X^2 * ETT) - n.ett * strataVariableMeans^2) / (n.ett - 1))
@ 

(Weighted) Variance for each variable:
<<>>=
(perVariableVariance <- colSums(strataVariableVar))
(apply(X, 2, var))
@ 
\end{document}
