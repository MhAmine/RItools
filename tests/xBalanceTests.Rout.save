
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-apple-darwin12.2.1 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> require("RItools")
Loading required package: RItools
Loading required package: abind
Package SparseM (0.96) loaded.
	   To cite, see citation("SparseM")

> 
> data(nuclearplants)
> 
> ##################################################
> ### Basic uses
> ##################################################
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, data=nuclearplants)
      strata  unstrat                                                              
      stat       pr=0     pr=1 adj.diff adj.diff.null.sd std.diff     z            
vars                                                                               
date         68.6182  68.5000  -0.1182          0.3872   -0.1147  -0.3052          
t1           13.6364  14.0000  0.3636           1.2852   0.1063   0.2830           
t2           59.3182  69.1000  9.7818           3.9644   1.0327   2.4674   *       
cap          805.1818 869.8000 64.6182          72.2187  0.3401   0.8948           
ne           0.2727   0.2000   -0.0727          0.1678   -0.1631  -0.4334          
ct           0.4545   0.3000   -0.1545          0.1903   -0.3080  -0.8121          
bw           0.1818   0.2000   0.0182           0.1512   0.0451   0.1202           
cum.n        8.7273   8.1000   -0.6273          2.4140   -0.0976  -0.2598          
--- Group Tests ---

Group: All 
         chisquare     df p.value       
                                        
unstrat     11.463  8.000   0.177       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, data=nuclearplants,
+          report=c("adj.means","adj.mean.diffs",'std.diffs', 'z.scores', 'chisquare.test'))
      strata  unstrat                                             
      stat       pr=0     pr=1 adj.diff std.diff     z            
vars                                                              
date         68.6182  68.5000  -0.1182  -0.1147  -0.3052          
t1           13.6364  14.0000  0.3636   0.1063   0.2830           
t2           59.3182  69.1000  9.7818   1.0327   2.4674   *       
cap          805.1818 869.8000 64.6182  0.3401   0.8948           
ne           0.2727   0.2000   -0.0727  -0.1631  -0.4334          
ct           0.4545   0.3000   -0.1545  -0.3080  -0.8121          
bw           0.1818   0.2000   0.0182   0.0451   0.1202           
cum.n        8.7273   8.1000   -0.6273  -0.0976  -0.2598          
--- Group Tests ---

Group: All 
         chisquare     df p.value       
                                        
unstrat     11.463  8.000   0.177       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+          strata=data.frame(unstrat=factor(character(32)),
+            pt=factor(nuclearplants$pt)),
+          data=nuclearplants,
+          report=c("adj.means","adj.mean.diffs",'std.diffs', 'z.scores', 'chisquare.test'))
      strata  unstrat                                                    pt                                             
      stat       pr=0     pr=1 adj.diff std.diff     z                 pr=0     pr=1 adj.diff std.diff     z            
vars                                                                                                                    
date         68.6182  68.5000  -0.1182  -0.1147  -0.3052           68.4924  68.5903  0.0979   0.0950   0.2923           
t1           13.6364  14.0000  0.3636   0.1063   0.2830            13.3953  14.3488  0.9535   0.2787   0.7918           
t2           59.3182  69.1000  9.7818   1.0327   2.4674   *        59.1802  68.5523  9.3721   0.9894   2.3094   *       
cap          805.1818 869.8000 64.6182  0.3401   0.8948            806.4535 873.0233 66.5698  0.3504   0.9188           
ne           0.2727   0.2000   -0.0727  -0.1631  -0.4334           0.2442   0.2209   -0.0233  -0.0522  -0.1445          
ct           0.4545   0.3000   -0.1545  -0.3080  -0.8121           0.4419   0.3314   -0.1105  -0.2201  -0.5828          
bw           0.1818   0.2000   0.0182   0.0451   0.1202            0.1977   0.1512   -0.0465  -0.1154  -0.3088          
cum.n        8.7273   8.1000   -0.6273  -0.0976  -0.2598           8.7209   7.9012   -0.8198  -0.1275  -0.3397          
--- Group Tests ---

Group: All 
         chisquare     df p.value       
                                        
unstrat     11.463  8.000   0.177       
pt          10.775  8.000   0.215       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> (xb0 <- xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+          strata=list(unstrat=NULL, pt=~pt),
+          data=nuclearplants,
+          report=c("adj.means","adj.mean.diffs",'std.diffs', 'z.scores', 'chisquare.test'))
+ )
      strata  unstrat                                                    pt                                             
      stat       pr=0     pr=1 adj.diff std.diff     z                 pr=0     pr=1 adj.diff std.diff     z            
vars                                                                                                                    
date         68.6182  68.5000  -0.1182  -0.1147  -0.3052           68.4924  68.5903  0.0979   0.0950   0.2923           
t1           13.6364  14.0000  0.3636   0.1063   0.2830            13.3953  14.3488  0.9535   0.2787   0.7918           
t2           59.3182  69.1000  9.7818   1.0327   2.4674   *        59.1802  68.5523  9.3721   0.9894   2.3094   *       
cap          805.1818 869.8000 64.6182  0.3401   0.8948            806.4535 873.0233 66.5698  0.3504   0.9188           
ne           0.2727   0.2000   -0.0727  -0.1631  -0.4334           0.2442   0.2209   -0.0233  -0.0522  -0.1445          
ct           0.4545   0.3000   -0.1545  -0.3080  -0.8121           0.4419   0.3314   -0.1105  -0.2201  -0.5828          
bw           0.1818   0.2000   0.0182   0.0451   0.1202            0.1977   0.1512   -0.0465  -0.1154  -0.3088          
cum.n        8.7273   8.1000   -0.6273  -0.0976  -0.2598           8.7209   7.9012   -0.8198  -0.1275  -0.3397          
--- Group Tests ---

Group: All 
         chisquare     df p.value       
                                        
unstrat     11.463  8.000   0.177       
pt          10.775  8.000   0.215       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> ##########################################################################################
> ### Oddness on LHS of formula
> ##########################################################################################Q
> xBalance(I(pr==1) ~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
+          strata=list(unstrat=NULL, pt=~pt),
+          data=nuclearplants,
+          report=c("adj.means","adj.mean.diffs",'std.diffs', 'z.scores', 'chisquare.test')
+          )
      strata      unstrat                                                            pt                                                 
      stat   I(pr == 1)=0 I(pr == 1)=1 adj.diff std.diff     z             I(pr == 1)=0 I(pr == 1)=1 adj.diff std.diff     z            
vars                                                                                                                                    
date             68.6182      68.5000  -0.1182  -0.1147  -0.3052               68.4924      68.5903  0.0979   0.0950   0.2923           
t1               13.6364      14.0000  0.3636   0.1063   0.2830                13.3953      14.3488  0.9535   0.2787   0.7918           
t2               59.3182      69.1000  9.7818   1.0327   2.4674   *            59.1802      68.5523  9.3721   0.9894   2.3094   *       
cap              805.1818     869.8000 64.6182  0.3401   0.8948                806.4535     873.0233 66.5698  0.3504   0.9188           
ne               0.2727       0.2000   -0.0727  -0.1631  -0.4334               0.2442       0.2209   -0.0233  -0.0522  -0.1445          
ct               0.4545       0.3000   -0.1545  -0.3080  -0.8121               0.4419       0.3314   -0.1105  -0.2201  -0.5828          
bw               0.1818       0.2000   0.0182   0.0451   0.1202                0.1977       0.1512   -0.0465  -0.1154  -0.3088          
cum.n            8.7273       8.1000   -0.6273  -0.0976  -0.2598               8.7209       7.9012   -0.8198  -0.1275  -0.3397          
--- Group Tests ---

Group: All 
         chisquare     df p.value       
                                        
unstrat     11.463  8.000   0.177       
pt          10.775  8.000   0.215       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> 
> ###(b0 <- xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                ~factor(pt), nuclearplants))
> #####################################################
> ###
> ###
> #####################################################
> ###### Test balance on v-bles one at a time.
> #####################################################
> ### xBalance(pr~ date, ~factor(pt), nuclearplants)
> ###
> #####################################################
> ###### Factor handling
> #####################################################
> ###a0 <- xBalance(pr~ date + t1 + t2 + cap + CUM.N, 
> ###               ~factor(pt),
> ###               data.frame(nuclearplants,
> ###                          CUM.N=cut(nuclearplants$cum.n, c(0,2,5,21), include=TRUE)),
> ###               chisq=FALSE)
> ###xBalance(pr~ date + t1 + t2 + cap + CUM.N, 
> ###         ~factor(pt),
> ###         data.frame(nuclearplants,
> ###                    CUM.N=cut(nuclearplants$cum.n, c(0,2,5,21), include=TRUE)),
> ###         chisq=TRUE)
> ###a1 <- xBalance(pr~ date + t1 + t2 + cap +
> ###               cut(cum.n, c(0,2,5,21), include=TRUE),
> ###               ~factor(pt),
> ###               nuclearplants)
> ###attributes(a0) <- attributes(a1) <- NULL
> ###all.equal(a0,a1)
> ###
> ###Also, handling bad factors in naImpute (i.e. only one level).
> #####################################################
> ###### When there are NAs in the grouping variable and we're doing
> ###### na.omit=TRUE, we don't want to omit rows with NA on
> ###### the grouping before evaluating fmla.  For me this is of concern
> ###### when fmla has a call to ns() in it, but it's easier to test the issue
> ###### using rank() (-BH)
> #####################################################
> ###nuclearplants$pt1 <- factor(nuclearplants$pt)
> ###nuclearplants$pt1[1:3] <- NA
> ###nuclearplants$rank.t1 <- rank(nuclearplants$t1)
> ###all.equal(nuclearplants$rank.t1[-(1:3)], rank(nuclearplants$t1[-(1:3)]))
> ###### note that the above is not TRUE -- omitting changes the ranks
> ###b1 <- xBalance(pr~rank.t1+t2, ~pt1, data=nuclearplants, na.rm=TRUE)[1,]
> ###b2 <- xBalance(pr~rank(t1)+t2, ~pt1, data=nuclearplants, na.rm=TRUE)[1,]
> ###attributes(b1) <- attributes(b2) <- NULL
> ###all.equal(b2,b1)
> ###
> #####################################################
> ###### finding stratum variable that's in calling
> ###### frame but not in data
> #####################################################
> ###mypt <- factor(nuclearplants$pt)
> ###all.equal(b0, xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                       ~mypt, nuclearplants))
> #####################################################
> ###### * Handling stratum weights                 ###
> #####################################################
> ###### ** Default weightings should evaluate before NAs are removed,
> ###### in my view.  (Note that this will require some re-coding, even before
> ###### nonstandard weighting functionality is added.  However, that
> ###### same re-coding ought to streamline integration of the new functionality.)
> ###b3 <- xBalance(pr~ifelse(pt,rank.t1,0)+t2, ~factor(pt), data=nuclearplants, na.rm=TRUE)[1,c(2,4)]
> ###b4 <- xBalance(pr~ifelse(pt,rank.t1,0)+pt1, ~factor(pt), data=nuclearplants, na.rm=TRUE)[1,c(2,4)]
> ###attributes(b3) <- attributes(b4) <- NULL
> ###all.equal(b3, b4) # Should be TRUE
> ###
> ###### ** Provided they're all nonnegative, they shouldn't
> ###### have to sum to 1.  Ie, the function should handle the re-normalizing.
> ###(my.hmnic.wts <- tapply(nuclearplants$pr, nuclearplants$pt,
> ###                        function(x) {1/(1/sum(x) + 1/sum(!x))}) )
> ###identical(b0,
> ###          xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                   ~factor(pt), nuclearplants,
> ###                   stratum.weights=my.hmnic.wts) )
> ###
> ###### **... unless user specifies "normalize.weights=FALSE"!  (For group-level
> ###### assmt, users may want to work with group-aggregated covariates while folding
> ###### de-aggregation into the weights.)
> #####  NEED TEST HERE
> ###
> ###### ** If stratum.weights is a function, it should
> ###### find v-bles within its data argument.
> ###pr <- nuclearplants$pr ; pr[which.max(pr)] <- 0 
> ###(not.hmnic.wts <- tapply(pr, nuclearplants$pt,
> ###                        function(x) {1/(1/sum(x) + 1/sum(!x))}) )
> ###identical(b0, # This should be FALSE
> ###          xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                   ~factor(pt), nuclearplants,
> ###                   stratum.weights=not.hmnic.wts) )
> ###identical(b0, # Whereas this should be TRUE, if evaluation happens properly
> ###          xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                   ~factor(pt), nuclearplants,
> ###                   stratum.weights=function(data){tapply(data$pr, data$pt,
> ###                     function(x) {1/(1/sum(x) + 1/sum(!x))})} ) )
> ###
> ###### ** If stratum.weights is a function, its
> ###### evaluation should within xBalance's 
> ###### parent frame for objects.
> ###PT <- nuclearplants$pt
> ###identical(b0, # Should be TRUE
> ###          xBalance(pr~date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                   ~factor(pt), nuclearplants,
> ###                   stratum.weights=function(data){tapply(data$pr, PT,
> ###                     function(x) {1/(1/sum(x) + 1/sum(!x))})} ) )
> ###
> ###### ** If stratum.weights is function to be evaluated within
> ###### data, then it needs to evaluate before na's are removed. (IMHO. -BH)
> ###
> ###### ** If stratum.weights is not a function, require it to specify a nonnegative
> ###### real number weight for each stratum in the reduced levels
> ###### of groups. The following tries should fail.
> ###try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants,
> ###             stratum.weights=my.hmnic.wts[-1]) )
> ###try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants,
> ###             stratum.weights=c(NA,my.hmnic.wts[-1]) ))
> ###try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants,
> ###             stratum.weights=-my.hmnic.wts) )
> ###try(xBalance(pr~.-cost-pt, ~factor(pt), nuclearplants,
> ###             stratum.weights=unlist(list('0'='a', '1'='b')) ) )
> ###
> ###### Non-binary "treatment" variable.
> ###xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants)
> ###
> ###xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants)
> ###
> ###xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants,
> ###         stratum.weights=my.hmnic.wts)
> ###
> ###xBalance(cost~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants,
> ###         stratum.weights=function(data){tapply(data$pr, data$pt,
> ###                     function(x) {1/(1/sum(x) + 1/sum(!x))})} )
> ###
> #####################################################
> ######        covariate.scaling                   ###
> #####################################################
> ###xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###         ~factor(pt), nuclearplants,
> ###         covariate.scaling=1)
> ###b0[1:2,]
> ###
> #####################################################
> ######   gracefully handle case of no strata w/   ###
> ######   variation in Tx group                    ###
> #####################################################
> ###xBalance(pr~ date + t1,
> ###         ~factor(pt), nuclearplants[c(1,32),])
> ###
> ###
> #####################################################
> ######      PRINT JUST THE CHISQUARE TESTS        ###
> #####################################################
> ###b0[numeric(0),]
> ###
> #####################################################
> ######               CHISQ="only"                 ###
> #####################################################
> ###xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n,
> ###                ~factor(pt), nuclearplants, chisq='only')
> ###
> #####################################################
> ######               xtable method                ###
> #####################################################
> if (require('xtable'))
+   {
+   xtablea <- xtable(xb0)
+   xtableb <- xtable(xb0, caption="Caption!", label="thetable", digits=1,
+        align=rep('l', prod(dim(xb0$result)[2:3])+1),
+        display=c('s', rep(c(rep('fg',5), 's'),2)) #,col.labels= do this one later
+        )
+   }
Loading required package: xtable
> 
> 
> #####################################################
> ######               include.means                ###
> #####################################################
> ###xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants,
> ###         covariate.scaling=1, include.means=TRUE)
> ###xBalance(pr~ date + t1 + t2 + cap + ne + ct + bw + cum.n, 
> ###         ~factor(pt), nuclearplants, include.means=TRUE)
> ###
> ###
> #####################################################
> ######  na.rm=FALSE with missing covariates       ###
> #####################################################
> ### Should create a new variable (0=not missing,1=missing) and impute missing values with the mean (median is new default)
> 
> set.seed(123)
> testdata<-nuclearplants
> testdata$date[sample(1:32,10)]<-NA
> 
> xBalance(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.n, data = testdata, 
+     na.rm = FALSE,impfn=mean.default) ##first using the mean to match up with previous versions
        strata   unstrat                                                                   
        stat        pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z             
vars                                                                                       
date           6.85e+01  6.85e+01  1.52e-02         2.81e-01  2.03e-02  5.41e-02           
t1             1.36e+01  1.40e+01  3.64e-01         1.29e+00  1.06e-01  2.83e-01           
t2             5.93e+01  6.91e+01  9.78e+00         3.96e+00  1.03e+00  2.47e+00  *        
cap            8.05e+02  8.70e+02  6.46e+01         7.22e+01  3.40e-01  8.95e-01           
ne             2.73e-01  2.00e-01  -7.27e-02        1.68e-01  -1.63e-01 -4.33e-01          
ct             4.55e-01  3.00e-01  -1.55e-01        1.90e-01  -3.08e-01 -8.12e-01          
bw             1.82e-01  2.00e-01  1.82e-02         1.51e-01  4.51e-02  1.20e-01           
cum.n          8.73e+00  8.10e+00  -6.27e-01        2.41e+00  -9.76e-02 -2.60e-01          
date.NA        4.55e-01  5.55e-17  -4.55e-01        1.80e-01  -1.07e+00 -2.53e+00 *        
--- Group Tests ---

Group: All 
         chisquare      df p.value        
                                          
unstrat    17.2928  9.0000  0.0443 *      
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> #####################################################
> ######  handling factor with no obs for a level in a strata  ###
> #####################################################
> 
> testdata<-nuclearplants
> testdata$cum.nF<-factor(testdata$cum.n)
> 
> ##Notice that for most levels of cum.n, there are no obs in one of the two strata
> table(testdata$pt,testdata$cum.n)
   
    1 2 3 5 6 7 8 11 12 14 15 16 17 18 19 20 21
  0 4 3 4 2 1 1 1  0  2  1  1  1  1  1  1  1  1
  1 0 0 0 0 0 1 2  3  0  0  0  0  0  0  0  0  0
>    
> ##    1 2 3 5 6 7 8 11 12 14 15 16 17 18 19 20 21
> ##  0 4 3 4 2 1 1 1  0  2  1  1  1  1  1  1  1  1
> ##  1 0 0 0 0 0 1 2  3  0  0  0  0  0  0  0  0  0
> 
> ##First no missing levels, same in both strata --- looks ok
> xBalance(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.nF, strata=list(nostrata=NULL,thept=~pt), data = testdata,impfn=mean.default)
            strata  nostrata                                                                        thept                                                                   
            stat        pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z                   pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z             
vars                                                                                                                                                                        
date               68.61818  68.50000  -0.11818         0.38721   -0.11468  -0.30522            68.49244  68.59035  0.09791          0.33498   0.09501   0.29227            
t1                 13.63636  14.00000  0.36364          1.28515   0.10630   0.28295             13.39535  14.34884  0.95349          1.20418   0.27872   0.79181            
t2                 59.31818  69.10000  9.78182          3.96436   1.03269   2.46744   *         59.18023  68.55233  9.37209          4.05825   0.98943   2.30939   *        
cap                805.18182 869.80000 64.61818         72.21875  0.34012   0.89476             806.45349 873.02326 66.56977         72.44984  0.35039   0.91884            
ne                 0.27273   0.20000   -0.07273         0.16779   -0.16312  -0.43345            0.24419   0.22093   -0.02326         0.16092   -0.05216  -0.14452           
ct                 0.45455   0.30000   -0.15455         0.19031   -0.30797  -0.81208            0.44186   0.33140   -0.11047         0.18953   -0.22013  -0.58282           
bw                 0.18182   0.20000   0.01818          0.15124   0.04511   0.12022             0.19767   0.15116   -0.04651         0.15063   -0.11541  -0.30877           
cum.nF = 1         0.13636   0.10000   -0.03636         0.12815   -0.10660  -0.28376            0.12209   0.11047   -0.01163         0.12580   -0.03409  -0.09243           
cum.nF = 2         0.09091   0.10000   0.00909          0.11295   0.03020   0.08049             0.08140   0.11047   0.02907          0.11139   0.09657   0.26097            
cum.nF = 3         0.13636   0.10000   -0.03636         0.12815   -0.10660  -0.28376            0.12209   0.11047   -0.01163         0.12580   -0.03409  -0.09243           
cum.nF = 5         0.04545   0.10000   0.05455          0.09380   0.21938   0.58153             0.04070   0.11047   0.06977          0.09291   0.28060   0.75094            
cum.nF = 6         0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 7         0.09091   0.00000   -0.09091         0.09380   -0.36927  -0.96922            0.11628   0.00000   -0.11628         0.10104   -0.47233  -1.15087           
cum.nF = 8         0.04545   0.20000   0.15455          0.11295   0.52961   1.36832             0.07558   0.18605   0.11047          0.11677   0.37855   0.94599            
cum.nF = 11        0.04545   0.20000   0.15455          0.11295   0.52961   1.36832             0.07558   0.15116   0.07558          0.10140   0.25901   0.74536            
cum.nF = 12        0.04545   0.10000   0.05455          0.09380   0.21938   0.58153             0.04070   0.11047   0.06977          0.09291   0.28060   0.75094            
cum.nF = 14        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 15        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 16        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 17        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 18        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 19        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 20        0.00000   0.10000   0.10000          0.06742   0.57735   1.48324             0.00000   0.11047   0.11047          0.06705   0.63777   1.64751   .        
cum.nF = 21        0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
--- Group Tests ---

Group: All 
          chisquare     df p.value       
                                         
nostrata     29.478 23.000   0.165       
thept        28.589 23.000   0.194       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> ##Second two missing levels, same in both strata
> ##This doesn't look as good --- we'd prefer to drop levels that don't exist.
> 
> testdata$cum.nF[testdata$cum.n>16]<-NA
> testdata$cum.nF[testdata$cum.n==7]<-NA
> table(testdata$pt,testdata$cum.nF,exclude=c()) ##Notice that the levels don't disappear by default.
      
       1 2 3 5 6 7 8 11 12 14 15 16 17 18 19 20 21 <NA>
  0    4 3 4 2 1 0 1  0  2  1  1  1  0  0  0  0  0    6
  1    0 0 0 0 0 0 2  3  0  0  0  0  0  0  0  0  0    1
  <NA> 0 0 0 0 0 0 0  0  0  0  0  0  0  0  0  0  0    0
> xBalance(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.nF, strata=list(nostrata=NULL,thept=~pt), data = testdata,na.rm=FALSE,impfn=mean.default)
             strata  nostrata                                                                        thept                                                                   
             stat        pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z                   pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z             
vars                                                                                                                                                                         
date                68.61818  68.50000  -0.11818         0.38721   -0.11468  -0.30522            68.49244  68.59035  0.09791          0.33498   0.09501   0.29227            
t1                  13.63636  14.00000  0.36364          1.28515   0.10630   0.28295             13.39535  14.34884  0.95349          1.20418   0.27872   0.79181            
t2                  59.31818  69.10000  9.78182          3.96436   1.03269   2.46744   *         59.18023  68.55233  9.37209          4.05825   0.98943   2.30939   *        
cap                 805.18182 869.80000 64.61818         72.21875  0.34012   0.89476             806.45349 873.02326 66.56977         72.44984  0.35039   0.91884            
ne                  0.27273   0.20000   -0.07273         0.16779   -0.16312  -0.43345            0.24419   0.22093   -0.02326         0.16092   -0.05216  -0.14452           
ct                  0.45455   0.30000   -0.15455         0.19031   -0.30797  -0.81208            0.44186   0.33140   -0.11047         0.18953   -0.22013  -0.58282           
bw                  0.18182   0.20000   0.01818          0.15124   0.04511   0.12022             0.19767   0.15116   -0.04651         0.15063   -0.11541  -0.30877           
cum.nF = 1          0.13636   0.10000   -0.03636         0.12815   -0.10660  -0.28376            0.12209   0.11047   -0.01163         0.12580   -0.03409  -0.09243           
cum.nF = 2          0.09091   0.10000   0.00909          0.11295   0.03020   0.08049             0.08140   0.11047   0.02907          0.11139   0.09657   0.26097            
cum.nF = 3          0.13636   0.10000   -0.03636         0.12815   -0.10660  -0.28376            0.12209   0.11047   -0.01163         0.12580   -0.03409  -0.09243           
cum.nF = 5          0.04545   0.10000   0.05455          0.09380   0.21938   0.58153             0.04070   0.11047   0.06977          0.09291   0.28060   0.75094            
cum.nF = 6          0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 7          0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = 8          0.04545   0.20000   0.15455          0.11295   0.52961   1.36832             0.07558   0.18605   0.11047          0.11677   0.37855   0.94599            
cum.nF = 11         0.04545   0.20000   0.15455          0.11295   0.52961   1.36832             0.07558   0.15116   0.07558          0.10140   0.25901   0.74536            
cum.nF = 12         0.04545   0.10000   0.05455          0.09380   0.21938   0.58153             0.04070   0.11047   0.06977          0.09291   0.28060   0.75094            
cum.nF = 14         0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 15         0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 16         0.04545   0.00000   -0.04545         0.06742   -0.25482  -0.67420            0.04070   0.00000   -0.04070         0.06705   -0.22816  -0.60698           
cum.nF = 17         0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = 18         0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = 19         0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = 20         0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = 21         0.00000   0.00000   0.00000          0.00000   NaN       0.00000             0.00000   0.00000   0.00000          0.00000   NaN       0.00000            
cum.nF = .NA        0.27273   0.10000   -0.17273         0.16019   -0.41236  -1.07829            0.27907   0.11047   -0.16860         0.16520   -0.40252  -1.02060           
--- Group Tests ---

Group: All 
          chisquare     df p.value       
                                         
nostrata     18.103 18.000   0.449       
thept        15.700 18.000   0.613       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> ##This isn't right either.
> xBalance(pr ~ date + t1 + t2 + cap + ne + ct + bw + cum.nF, strata=list(nostrata=NULL,thept=~pt), data = testdata,na.rm=TRUE,impfn=mean.default)
            strata  nostrata                                                                        thept                                                                   
            stat        pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z                   pr=0      pr=1  adj.diff adj.diff.null.sd  std.diff      z             
vars                                                                                                                                                                        
date               6.83e+01  6.82e+01  -7.14e-02        2.74e-01  -6.93e-02 -2.60e-01           6.82e+01  6.83e+01  1.12e-01         2.41e-01  1.09e-01  4.66e-01           
t1                 1.26e+01  1.31e+01  5.49e-01         9.94e-01  1.60e-01  5.52e-01            1.26e+01  1.35e+01  9.63e-01         1.01e+00  2.81e-01  9.55e-01           
t2                 6.16e+01  7.04e+01  8.88e+00         4.24e+00  9.38e-01  2.10e+00  *         6.17e+01  6.98e+01  8.07e+00         4.26e+00  8.52e-01  1.90e+00  .        
cap                7.84e+02  8.74e+02  9.04e+01         7.99e+01  4.76e-01  1.13e+00            7.87e+02  8.80e+02  9.29e+01         8.21e+01  4.89e-01  1.13e+00           
ne                 3.12e-01  1.11e-01  -2.01e-01        1.82e-01  -4.52e-01 -1.11e+00           2.78e-01  1.30e-01  -1.48e-01        1.78e-01  -3.32e-01 -8.30e-01          
ct                 3.75e-01  3.33e-01  -4.17e-02        2.04e-01  -8.30e-02 -2.04e-01           3.33e-01  3.89e-01  5.56e-02         1.94e-01  1.11e-01  2.87e-01           
bw                 2.50e-01  2.22e-01  -2.78e-02        1.82e-01  -6.89e-02 -1.53e-01           2.78e-01  1.48e-01  -1.30e-01        1.78e-01  -3.22e-01 -7.28e-01          
cum.nF = 1         1.88e-01  1.11e-01  -7.64e-02        1.56e-01  -1.99e-01 -4.90e-01           1.67e-01  1.30e-01  -3.70e-02        1.56e-01  -9.66e-02 -2.38e-01          
cum.nF = 2         1.25e-01  1.11e-01  -1.39e-02        1.38e-01  -4.10e-02 -1.01e-01           1.11e-01  1.30e-01  1.85e-02         1.39e-01  5.46e-02  1.33e-01           
cum.nF = 3         1.88e-01  1.11e-01  -7.64e-02        1.56e-01  -1.99e-01 -4.90e-01           1.67e-01  1.30e-01  -3.70e-02        1.56e-01  -9.66e-02 -2.38e-01          
cum.nF = 5         6.25e-02  1.11e-01  4.86e-02         1.15e-01  1.75e-01  4.21e-01            5.56e-02  1.30e-01  7.41e-02         1.17e-01  2.67e-01  6.34e-01           
cum.nF = 6         6.25e-02  0.00e+00  -6.25e-02        8.33e-02  -2.99e-01 -7.50e-01           5.56e-02  -6.94e-18 -5.56e-02        8.49e-02  -2.66e-01 -6.55e-01          
cum.nF = 7         0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
cum.nF = 8         6.25e-02  2.22e-01  1.60e-01         1.38e-01  5.00e-01  1.16e+00            1.11e-01  2.04e-01  9.26e-02         1.40e-01  2.90e-01  6.62e-01           
cum.nF = 11        6.25e-02  2.22e-01  1.60e-01         1.38e-01  5.00e-01  1.16e+00            1.11e-01  1.48e-01  3.70e-02         1.11e-01  1.16e-01  3.33e-01           
cum.nF = 12        6.25e-02  1.11e-01  4.86e-02         1.15e-01  1.75e-01  4.21e-01            5.56e-02  1.30e-01  7.41e-02         1.17e-01  2.67e-01  6.34e-01           
cum.nF = 14        6.25e-02  0.00e+00  -6.25e-02        8.33e-02  -2.99e-01 -7.50e-01           5.56e-02  -6.94e-18 -5.56e-02        8.49e-02  -2.66e-01 -6.55e-01          
cum.nF = 15        6.25e-02  0.00e+00  -6.25e-02        8.33e-02  -2.99e-01 -7.50e-01           5.56e-02  -6.94e-18 -5.56e-02        8.49e-02  -2.66e-01 -6.55e-01          
cum.nF = 16        6.25e-02  0.00e+00  -6.25e-02        8.33e-02  -2.99e-01 -7.50e-01           5.56e-02  -6.94e-18 -5.56e-02        8.49e-02  -2.66e-01 -6.55e-01          
cum.nF = 17        0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
cum.nF = 18        0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
cum.nF = 19        0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
cum.nF = 20        0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
cum.nF = 21        0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00            0.00e+00  0.00e+00  0.00e+00         0.00e+00  NaN       0.00e+00           
--- Group Tests ---

Group: All 
          chisquare     df p.value       
                                         
nostrata     23.073 17.000   0.147       
thept        22.624 17.000   0.162       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> 
> 
> #####################################################
> ######  handling factor with no levels strata=argument  ###
> #####################################################
> try(xBalance(pr ~ date,
+              strata=data.frame(nastrat=factor(rep(NA,nrow(testdata))) ),
+              data=testdata), FALSE)
Error in xBalance(pr ~ date, strata = data.frame(nastrat = factor(rep(NA,  : 
  'strata=' variable contains no strata.  Perhaps it evaluates to NAs?
> 
> xBalance(pr ~ date,
+          strata=data.frame(nostrata=factor(rep('a',nrow(testdata))),
+            nastrat=factor(rep(NA,nrow(testdata))) ),
+          data=testdata)
     strata nostrata                                                         
     stat       pr=0   pr=1 adj.diff adj.diff.null.sd std.diff    z          
vars                                                                         
date          68.618 68.500   -0.118           0.387    -0.115  -0.305       
--- Group Tests ---

Group: All 
          chisquare     df p.value       
                                         
nostrata     0.0932 1.0000  0.7602       
---
Signif. codes:  0 '***' 0.001 '** ' 0.01 '*  ' 0.05 '.  ' 0.1 '   ' 1 
> #####################################################
> ######             WISHLIST                       ###
> #####################################################
> ###
> ###
> ###
> ###
> 
> proc.time()
   user  system elapsed 
  0.973   0.048   1.004 
